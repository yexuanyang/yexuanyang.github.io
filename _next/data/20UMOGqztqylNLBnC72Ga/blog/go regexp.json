{"pageProps":{"article":{"id":"go regexp","contentHtml":"<h2>Match方法</h2>\n<p>serchIn是string类型,表示要匹配的字符串;pat表示匹配模式(正则表达式)</p>\n<p><code>ok, _ := regexp.Match(pat, []byte(searchIn))</code></p>\n<h2>MatchString方法</h2>\n<p>searchIn是string类型</p>\n<p><code>ok, _ := regexp.MatchString(pat, searchIn)</code></p>\n<h2>其他的方法</h2>\n<p>需要使用Compile返回一个Regexp对象</p>\n<h2>例子</h2>\n<h3>例子一</h3>\n<pre><code class=\"language-go\">package main\r\nimport (\r\n\"fmt\"\r\n\"regexp\"\r\n\"strconv\"\r\n)\r\nfunc main() {\r\n//目标字符串\r\nsearchIn := \"John: 2578.34 William: 4567.23 Steve: 5632.18\"\r\npat := \"[0-9]+.[0-9]+\" //正则\r\nf := func(s string) string{\r\nv, _ := strconv.ParseFloat(s, 32)\r\nreturn strconv.FormatFloat(v * 2, 'f', 2, 32)\r\n}\r\nif ok, _ := regexp.Match(pat, []byte(searchIn)); ok {\r\nfmt.Println(\"Match Found!\")\r\n}\r\nre, _ := regexp.Compile(pat)\r\n//将匹配到的部分替换为\"##.#\"\r\nstr := re.ReplaceAllString(searchIn, \"##.#\")\r\nfmt.Println(str)\r\n//参数为函数时\r\nstr2 := re.ReplaceAllStringFunc(searchIn, f)\r\nfmt.Println(str2)\r\n}\n</code></pre>\n<p>这段代码匹配了字符串中的浮点数(不完全正确,因为中间的.表示匹配任意字符,如果只是想匹配点字符那么要转义,例如 <code>\"[0-9]+\\\\.[0-9]+\"</code>),使用<strong>regexp.Match</strong>查看是否匹配,匹配之后采用<strong>regexp.Compile()<strong>获得一个</strong>Regexp</strong>对象,然后使用这个对象的方法<strong>ReplaceAllString</strong>和<strong>ReplaceAllStringFunc</strong>替换匹配到的字符串</p>\n<p><strong>regexp.Compile</strong>有可能会返回错误,因为正则表达式可能是无效的;如果想要检验正则表达式的正确性可以使用**regexp.**<strong>MustCompile</strong>,如果不正确直接panic;</p>\n<h2>正则表达式合法性检查</h2>\n<p>给出一个可以匹配正则表达式的正则表达式(合法性检查),如果需要通过用户输入来得到正则表达式,可以采用下列方式验证表达式是否合理:</p>\n<p><code>/^(?!(\\?|\\*|\\+|\\{\\d+(?:,\\d*)?\\}))((?:[^\\\\\\^\\[\\].|?+*()\\s]+|\\\\.|\\[.*?\\])+)$/</code></p>\n","title":"Go正则表达式使用指南","date":"2023-07-31","category":"GO","tags":["GO"],"summary":"介绍Go语言中正则表达式的常用方法和使用场景","views":0}},"__N_SSG":true}